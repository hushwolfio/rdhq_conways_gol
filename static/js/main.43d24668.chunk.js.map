{"version":3,"sources":["components/Grid/styledGridComponents.ts","components/Grid/GridView.tsx","components/Grid/GridContainer.tsx","components/Grid/helperFunctions.tsx","components/Grid/gridConstants.ts","components/Game/styledGameComponents.ts","components/Game/GameView.tsx","components/Game/GameContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledGridDisplay","styled","div","GridRow","AliveCell","DeadCell","GridView","grid","map","row","index","key","cell","alive","column","GridContainer","setGameState","gamePlaying","randomGrid","Array","i","j","Math","round","random","id","generateGrid","useState","setGrid","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","validLifeCycle","nextGeneration","surroundinglivingCells","surroundingCells","cellColumn","cellRow","push","getSurroundingCells","forEach","StyledGame","StyledTitle","StyledDescription","Button","GameView","onClick","GameContainer","setGame","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43d24668.chunk.js","sourcesContent":["/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledGridDisplay = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 500px;\r\n  width: 500px;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst GridRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 5px;\r\n`;\r\n\r\nconst AliveCell = styled.div`\r\n  background-color: #12c124;\r\n  width: 5px;\r\n`;\r\n\r\nconst DeadCell = styled.div`\r\n  background-color: #010101;\r\n  width: 5px;\r\n`;\r\n\r\nexport { StyledGridDisplay, GridRow, AliveCell, DeadCell };\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\n\r\nimport React from 'react';\r\nimport { StyledGridDisplay, GridRow, AliveCell, DeadCell } from './styledGridComponents';\r\n\r\ntype CellType = {\r\n  alive: number;\r\n  column: number;\r\n  row: number;\r\n  id: string;\r\n};\r\n\r\ntype Props = {\r\n  grid: CellType[][];\r\n};\r\n\r\n/**\r\n * Displays:\r\n * GridDisplay\r\n * Grid Cells (100x100 cells)\r\n */\r\nconst GridView = ({ grid }: Props) => (\r\n  <StyledGridDisplay>\r\n    {grid.map((row: CellType[], index: number) => (\r\n      <GridRow key={index}>\r\n        {row.map((cell: CellType) =>\r\n          cell.alive ? <AliveCell key={`${cell.row}${cell.column}`} /> : <DeadCell key={`${cell.row}${cell.column}`} />\r\n        )}\r\n      </GridRow>\r\n    ))}\r\n  </StyledGridDisplay>\r\n);\r\n\r\nexport default GridView;\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\nimport React, { useState } from 'react';\r\nimport GridView from './GridView';\r\nimport { generateGrid, getSurroundingCells, useInterval } from './helperFunctions';\r\n\r\ntype CellType = {\r\n  alive: number;\r\n  column: number;\r\n  row: number;\r\n  id: string;\r\n};\r\n\r\ntype Props = {\r\n  // callback to update whether the game should be playing or not\r\n  setGameState: () => void;\r\n  // boolean whether game is playing\r\n  gamePlaying: boolean;\r\n};\r\n\r\n/**\r\n * Displays:\r\n * GridView\r\n */\r\nconst GridContainer = ({ setGameState, gamePlaying }: Props) => {\r\n  // generates the random 100x100 grid\r\n  const randomGrid = generateGrid();\r\n  // sets grid for first time\r\n  const [grid, setGrid] = useState(randomGrid);\r\n\r\n  // the life cycle of conway's game of life\r\n  const lifeCycle = () => {\r\n    // if start button has been clicked\r\n    if (gamePlaying) {\r\n      let validLifeCycle = false;\r\n\r\n      const nextGeneration = grid.map((row: CellType[]) =>\r\n        row.map((cell: CellType) => {\r\n          //\r\n          let surroundinglivingCells = 0;\r\n          // checks all possible 8 cells around cell\r\n          let surroundingCells = getSurroundingCells(grid, cell);\r\n          // figures out how many cells are alive around it\r\n          surroundingCells.forEach(cell => {\r\n            if (cell.alive) {\r\n              surroundinglivingCells += 1;\r\n            }\r\n          });\r\n\r\n          if (cell.alive && (surroundinglivingCells === 2 || surroundinglivingCells === 3)) {\r\n            return cell;\r\n          }\r\n\r\n          if (cell.alive && (surroundinglivingCells < 2 || surroundinglivingCells >= 4)) {\r\n            validLifeCycle = true;\r\n            return { ...cell, alive: 0 };\r\n          }\r\n          if (!cell.alive && surroundinglivingCells === 3) {\r\n            validLifeCycle = true;\r\n            return { ...cell, alive: 1 };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n\r\n      // if none of the cells are changing anymore stop the game\r\n      if (!validLifeCycle) {\r\n        setGameState();\r\n      }\r\n\r\n      // update the grid with the new generation of alive/dead cells\r\n      setGrid(nextGeneration);\r\n    }\r\n  };\r\n\r\n  // starts the interval for every 500 milliseconds\r\n  useInterval(lifeCycle, 500);\r\n\r\n  return <GridView grid={grid} />;\r\n};\r\n\r\nexport default GridContainer;\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\nimport { useEffect, useRef } from 'react';\r\nimport { ROWS, COLUMNS } from './gridConstants';\r\n\r\ntype CellType = {\r\n  alive: number;\r\n  column: number;\r\n  row: number;\r\n  id: string;\r\n};\r\n\r\n// generates a value of 0 or 1\r\nconst randomizeLifeState = () => Math.round(Math.random());\r\n\r\n// generates a 100x100 grid with random alive cells\r\nconst generateGrid = () => {\r\n  let grid: CellType[][] = [...Array(COLUMNS)].map(row => Array(ROWS));\r\n\r\n  for (let i = 0; i < ROWS; i++) {\r\n    for (let j = 0; j < COLUMNS; j++) {\r\n      grid[i][j] = {\r\n        column: i,\r\n        row: j,\r\n        alive: randomizeLifeState(),\r\n        id: `${i}${j}`\r\n      };\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\n// checks all 8 possible cells surrounding the cell, if cell exists add it to array and return it\r\nconst getSurroundingCells = (grid: CellType[][], cell: CellType) => {\r\n  let surroundingCells = [];\r\n  let cellColumn = cell.column;\r\n  let cellRow = cell.row;\r\n\r\n  // top left cell\r\n  if (cellColumn - 1 >= 0 && cellRow - 1 >= 0) {\r\n    surroundingCells.push(grid[cellRow - 1][cellColumn - 1]);\r\n  }\r\n\r\n  //top cell\r\n  if (cellRow - 1 >= 0) {\r\n    surroundingCells.push(grid[cellRow - 1][cellColumn]);\r\n  }\r\n\r\n  //top right cell\r\n  // since size of grid is 100 always, safe to hardcode 100 for this case\r\n  if (cellColumn + 1 < 100 && cellRow - 1 >= 0) {\r\n    surroundingCells.push(grid[cellRow - 1][cellColumn + 1]);\r\n  }\r\n\r\n  // left cell\r\n  if (cellColumn - 1 >= 0) {\r\n    surroundingCells.push(grid[cellRow][cellColumn - 1]);\r\n  }\r\n\r\n  // right cell\r\n  if (cellColumn + 1 < 100) {\r\n    surroundingCells.push(grid[cellRow][cellColumn + 1]);\r\n  }\r\n\r\n  // bottom left cell\r\n  if (cellColumn - 1 >= 0 && cellRow + 1 < 100) {\r\n    surroundingCells.push(grid[cellRow + 1][cellColumn - 1]);\r\n  }\r\n\r\n  // bottom cell\r\n  if (cellRow + 1 < 100) {\r\n    surroundingCells.push(grid[cellRow + 1][cellRow]);\r\n  }\r\n\r\n  // bottom right cell\r\n  if (cellRow + 1 < 100 && cellColumn + 1 < 100) {\r\n    surroundingCells.push(grid[cellRow + 1][cellColumn + 1]);\r\n  }\r\n\r\n  return surroundingCells;\r\n};\r\n\r\n// set interval custom hook\r\n// resource for figuring this difficult part since setInterval wasn't working for me with useEffect, turns out this explains why and how to fix it! https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nconst useInterval = (callback: any, delay: number) => {\r\n  const savedCallback = useRef(() => {});\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    const tick: any = () => {\r\n      if (savedCallback.current) {\r\n        savedCallback.current();\r\n      }\r\n    };\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n\r\nexport { randomizeLifeState, generateGrid, getSurroundingCells, useInterval };\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\n\r\n// size of the grid\r\nconst ROWS = 100;\r\nconst COLUMNS = 100;\r\n\r\nexport { ROWS, COLUMNS };\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledGame = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n`;\r\n\r\nconst StyledTitle = styled.div`\r\n  display: flex;\r\n  font-size: 30px;\r\n  padding: 15px;\r\n`;\r\n\r\nconst StyledDescription = styled.div`\r\n  display: flex;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst Button = styled.div`\r\ndisplay: flex;\r\nheight 25px;\r\nwidth: 50px;\r\njustify-content: center;\r\nalign-items: center;\r\npadding 5px;\r\nbackground-color: #12c124;\r\ncursor: pointer;\r\n`;\r\n\r\nexport { StyledGame, StyledTitle, StyledDescription, Button };\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\n\r\nimport React from 'react';\r\nimport GridContainer from '../Grid/GridContainer';\r\nimport { StyledGame, StyledTitle, StyledDescription, Button } from './styledGameComponents';\r\n\r\ntype Props = {\r\n  // callback to update whether game should be running or not\r\n  setGameState: () => void;\r\n  // boolean whether game is playing\r\n  gamePlaying: boolean;\r\n};\r\n\r\n/**\r\n * Displays:\r\n * Title\r\n * Grid Container\r\n * Description\r\n * Button for starting/stopping\r\n */\r\nconst GameView = ({ setGameState, gamePlaying }: Props) => (\r\n  <StyledGame>\r\n    <StyledTitle>Conway's Game of Life Code Challenge</StyledTitle>\r\n    <GridContainer setGameState={setGameState} gamePlaying={gamePlaying} />\r\n    <StyledDescription>Green = Alive, Black = Dead</StyledDescription>\r\n    <Button onClick={setGameState}>{gamePlaying ? 'Stop' : 'Start'}</Button>\r\n  </StyledGame>\r\n);\r\n\r\nexport default GameView;\r\n","/**\r\n * Austin Welborn\r\n * RedDoorHQ Conway's Game of Life Challenge\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport GameView from './GameView';\r\n\r\n/**\r\n * Displays:\r\n * Game View\r\n */\r\nconst GameContainer = () => {\r\n  const [gamePlaying, setGame] = useState(false);\r\n\r\n  const setGameState = () => {\r\n    setGame(!gamePlaying);\r\n  };\r\n\r\n  return <GameView setGameState={setGameState} gamePlaying={gamePlaying} />;\r\n};\r\n\r\nexport default GameContainer;\r\n","import React from 'react';\r\nimport GameContainer from './components/Game/GameContainer';\r\n\r\nfunction App() {\r\n  return <GameContainer />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}